" GIT >>>
Plug 'tpope/vim-fugitive'
" ------------------------------------------------------------------------------------------------------

" REPEAT >>>
Plug 'tpope/vim-repeat'
" ------------------------------------------------------------------------------------------------------
" Plug 'tpope/vim-unimpaired'


" SURROUND >>>
Plug 'tpope/vim-surround'
" Use 'S' for visual selection surround
" ------------------------------------------------------------------------------------------------------

"SYSTEM-COPY >>>
Plug 'christoomey/vim-system-copy'
" ------------------------------------------------------------------------------------------------------

" MATCH TAGS >>>
Plug 'gregsexton/matchtag'
" ------------------------------------------------------------------------------------------------------

" AUTO-CLOSE BRACKETS, QUOTES >>>
Plug 'cohama/lexima.vim'
let g:lexima_enable_newline_rules=1
" ------------------------------------------------------------------------------------------------------

" YANK RING >>>
Plug 'vim-scripts/YankRing.vim'
nnoremap <silent> <F9> :YRShow<CR>
let g:yankring_o_keys = 'b B w W e E d y $ G ;'
let yankring_replace_n_pkey = '<C-b>'
let yankring_replace_p_pkey = '<C-b>'

Plug 'machakann/vim-highlightedyank'
" Plug 'svermeulen/vim-yoink'

" CUTLASS >>>
Plug 'svermeulen/vim-cutlass'
nnoremap x d
xnoremap x d

nnoremap xx dd
nnoremap X D


" ------------------------------------------------------------------------------------------------------

" CLOSE TAG >>>
Plug 'jiangmiao/auto-pairs'
let g:AutoPairsMapCR = 0
Plug 'alvan/vim-closetag'
" execute 'inoremap <buffer> <silent> <CR> <C-R>=AutoPairsReturn()<CR>'
" ------------------------------------------------------------------------------------------------------

" TEXT OBJECTS (Kryptonite) >>>
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-function'
Plug 'thalesmello/vim-textobj-methodcall'
Plug 'beloglazov/vim-textobj-quotes'
Plug 'glts/vim-textobj-comment'
Plug 'rhysd/vim-textobj-anyblock'
Plug 'rhysd/vim-textobj-word-column'
" ------------------------------------------------------------------------------------------------------

" Expand code regions above and below selected block
vnoremap = o{o}

Plug 'vim-scripts/sideways.vim'
nnoremap <leader>pl :SidewaysLeft<cr>
nnoremap <leader>pr :SidewaysRight<cr>


" EMMET >>>
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

let g:user_emmet_mode='a'    "enable all function in all mode.
let g:user_emmet_leader_key = ','
" let g:user_emmet_expandabbr_key='<Tab>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" SUPER TAB >>>
Plug 'ervandew/supertab'

set completeopt=menu,longest
let g:SuperTabCrMapping=1
let g:SuperTabLongestHighlight=0
let g:SuperTabLongestEnhanced=0
let g:SuperTabDefaultCompletionType="<c-n>"
let g:SuperTabContextDefaultCompletionType="<c-n>"

set wildmode=list:longest,list:full

" function! InsertTabWrapper()
"   let col = col('.') - 1
"   if !col || getline('.')[col - 1] !~ '\k'
"     return "\<tab>"
"   else
"     return "\<c-p>"
"   endif
" endfunction

" au BufEnter * imap <Tab> <c-r>=InsertTabWrapper()<cr>
" au BufEnter * imap <S-Tab> <c-n>


" ------------------------------------------------------------------------------------------------------
"
" ULTIMATE SNIPS >>>
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" function! g:UltiSnips_Complete()
"     call UltiSnips_ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips_JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction

" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"


" let g:UltiSnipsSnippetsDir='~/.vim/snippets'
" let g:UltiSnipsExpandTrigger           = '<C-]>'
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsJumpForwardTrigger='<c-n>'
let g:UltiSnipsJumpBackwardTrigger='<c-p>'

" nnoremap <leader>use :UltiSnipsEdit<cr>
" ------------------------------------------------------------------------------------------------------

Plug 'vim-scripts/vim-task-org'
let g:vtoCommDictNew = {'typescript': '// '}

map <leader>dod :Ti<CR>TODO...<space>
map <leader>dot :Ti<CR>TRICKY...<space>
map <leader>dof :Ti<CR>FIXME...<space>
map <leader>dob :Ti<CR>BUG...<space>
map <leader>dow :Ti<CR>WARNING...<space>
map <leader>don :Ti<CR>NOTES...<space>

" map <leader>id :Di<CR>
" map <F5> :Vt<CR>
" map <C-CR> :Jt<CR>

" COMMENTARY >>>
Plug 'tpope/vim-commentary'

" INDENT DETECT FOR CODE INLINE >>>
" Plug 'ciaranm/detectindent'
Plug 'myint/indent-finder'
Plug 'jason0x43/vim-js-indent'

" Plug 'kana/vim-smartinput'
" Plug 'kana/vim-smartchr'
" inoremap <expr> >>  smartchr#one_of(' => ', '>')

Plug 'benmills/vimux'
Plug 'tyewang/vimux-jest-test'


" MATCH LINES >>>
imap <c-f><c-s> <plug>(fzf-complete-line)

" BREAK LINES >>>
" Plug 'andrewradev/splitjoin.vim'

" vim:ft=vim



