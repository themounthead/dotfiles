" GIT >>>
Plug 'tpope/vim-fugitive'

" REPEAT >>>
Plug 'tpope/vim-repeat'
" ------------------------------------------------------------------------------------------------------
" Plug 'tpope/vim-unimpaired'


" MOVE-LINES >>>
Plug 'matze/vim-move'
let g:move_map_keys = 0
nmap <C-S-Down> <Plug>MoveLineDown
nmap <C-S-Up> <Plug>MoveLineUp
vmap <C-S-Down> <Plug>MoveBlockDown
vmap <C-S-Up> <Plug>MoveBlockUp
" ------------------------------------------------------------------------------------------------------

" SURROUND >>>
Plug 'tpope/vim-surround'
" ------------------------------------------------------------------------------------------------------

"SYSTEM-COPY >>>
Plug 'christoomey/vim-system-copy'
" ------------------------------------------------------------------------------------------------------

" MATCH TAGS >>>
Plug 'gregsexton/matchtag'
" ------------------------------------------------------------------------------------------------------

" AUTO-CLOSE BRACKETS, QUOTES >>>
Plug 'cohama/lexima.vim'
" ------------------------------------------------------------------------------------------------------

" CLOSE TAG >>>
Plug 'alvan/vim-closetag'
" ------------------------------------------------------------------------------------------------------

" TEXT OBJECTS (Kryptonite) >>>
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-function'
Plug 'beloglazov/vim-textobj-quotes'
Plug 'glts/vim-textobj-comment'
Plug 'rhysd/vim-textobj-anyblock'
Plug 'rhysd/vim-textobj-word-column'
" ------------------------------------------------------------------------------------------------------


" EMMET >>>
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

let g:user_emmet_mode='a'    "enable all function in all mode.
" let g:user_emmet_leader_key = '<c-y>'

" SUPER TAB >>>
Plug 'ervandew/supertab'

set completeopt=menu,longest
let g:SuperTabCrMapping=0
let g:SuperTabLongestHighlight=0
let g:SuperTabLongestEnhanced=0

set wildmode=list:longest,list:full

function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

" au BufEnter * imap <Tab> <c-r>=InsertTabWrapper()<cr>
au BufEnter * imap <S-Tab> <c-n>


" ------------------------------------------------------------------------------------------------------
"
" ULTIMATE SNIPS >>>
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" function! g:UltiSnips_Complete()
"     call UltiSnips_ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips_JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction

" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"


" let g:UltiSnipsSnippetsDir='~/.vim/snippets'
" let g:UltiSnipsEditSplit='vertical'
" let g:UltiSnipsExpandTrigger           = '<C-]>'
let g:UltiSnipsJumpForwardTrigger      = '<C-b>'
" let g:UltiSnipsJumpBackwardTrigger     = '<C-2>'

" nnoremap <leader>use :UltiSnipsEdit<cr>
" ------------------------------------------------------------------------------------------------------

Plug 'vim-scripts/vim-task-org'
let g:vtoCommDictNew = {'typescript': '// '}
map <leader>do :Ti<CR>
" map <leader>id :Di<CR>
" map <F5> :Vt<CR>
" map <C-CR> :Jt<CR>

" COMMENTARY >>>
Plug 'tpope/vim-commentary'

" INDENT DETECT FOR CODE INLINE >>>
" Plug 'ciaranm/detectindent'
Plug 'myint/indent-finder'
Plug 'jason0x43/vim-js-indent'

" Plug 'kana/vim-smartinput'
" Plug 'kana/vim-smartchr'
" inoremap <expr> >>  smartchr#one_of(' => ', '>')


" vim:ft=vim



